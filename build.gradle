import org.ajoberstar.grgit.*
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath group: 'kr.motd.gradle', name: 'sphinx-gradle-plugin', version: '1.0.3.Final'
    classpath group: 'org.ajoberstar', name: 'grgit', version: '2.1.0'
  }
}

// Get version information from GIT branch.
def loadGitBranchInformation() {
    def branch = "sitewhere-x.x.x"
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    println 'Detected branch ' + branch
    project.ext.gitBranchName = branch.substring(10)
}

apply plugin: 'kr.motd.sphinx'
sphinx {
	// Load information for current branch.
	loadGitBranchInformation()
	
	outputDirectory = "${buildDir}/sitewhere/docs/" + project.ext.gitBranchName
}

apply plugin: 'java'

// Prepare by pulling sitewhere gh-pages repository.
task beforeSphinxBuild() {
	// Load username/password from Gradle properties or ENV variables.
	def username = (docgenUser != null) ? docgenUser : System.getenv('DOCGEN_USER')
	def password = (docgenPassword != null) ? docgenPassword : System.getenv('DOCGEN_PASSWORD')
	
	// Clone SiteWhere repository.
	delete "${buildDir}/sitewhere"
	project.ext.gitRepository = Grgit.clone(dir: "${buildDir}/sitewhere", 
		uri: 'https://github.com/sitewhere/sitewhere.git', refToCheckout: 'gh-pages',
		credentials: new Credentials(username, password))
	
	// Remove existing documentation for generated version.
	delete "${buildDir}/sitewhere/docs/" + project.ext.gitBranchName
}

task buildSphinxConfig(type: Copy) {
    from 'src/templates/sphinx'
    into 'src/site/sphinx'
    include 'conf.py'
    filter(ReplaceTokens, tokens: [version: project.ext.gitBranchName])
}

task docs(dependsOn: ['beforeSphinxBuild', 'buildSphinxConfig', 'site']) {
	doLast {
		delete "${buildDir}/sitewhere/docs/" + project.ext.gitBranchName + "/.doctrees"
		
		project.ext.gitRepository.add(patterns: ["docs/" + project.ext.gitBranchName], update: false) 
		project.ext.gitRepository.add(patterns: ["docs/" + project.ext.gitBranchName], update: true)
		project.ext.gitRepository.commit(message: 'Automated documentation update.')
		project.ext.gitRepository.push(refsOrSpecs: ['gh-pages'])
		
		// Close repository.
		project.ext.gitRepository.close()
	}
}